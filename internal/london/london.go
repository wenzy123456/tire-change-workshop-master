package london

import (
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/sqlite" // initializes SQLite GORM dialect
	log "github.com/sirupsen/logrus"
	_ "github.com/surmus/tire-change-workshop/api/london" // docs is generated by Swag CLI, you have to import it.
	"github.com/surmus/tire-change-workshop/internal/shared"
	"gopkg.in/gormigrate.v1"
	"time"
)

var db *gorm.DB

// Init initializes london application context by setting up database and registering REST endpoints,
// returns Gin Router instance with registered endpoints
func Init(debugMode bool) *gin.Engine {
	db = initDB(debugMode)
	repository := newTireChangeTimeRepository(db)
	service := newTireChangeTimesService(repository)

	if !debugMode {
		gin.SetMode(gin.ReleaseMode)
	}

	r := gin.New()
	// Add a ginrus middleware, which:
	//   - Logs all requests, like a combined access and errors log.
	//   - Logs to stdout.
	//   - RFC3339 with UTC time format.
	r.Use(shared.GinRusMiddleware(log.StandardLogger(), time.RFC3339, true))
	// Recovery middleware recovers from any panics and writes a 500 if there was one.
	r.Use(gin.Recovery())
	// ErrorHandler middleware catches application errors and renders them as XML
	r.Use(errorHandlerMiddleware())
	// Register application routes
	registerController(r, service)

	return r
}

func initDB(debugMode bool) *gorm.DB {
	db, err := gorm.Open("sqlite3", ":memory:")
	db.DB().SetMaxOpenConns(1) // Fixes possible error occurring with concurrent requests

	if err != nil {
		panic(err)
	}

	db.LogMode(debugMode)

	runDBMigration(db)

	log.Info("Database initialized")

	return db
}

func runDBMigration(db *gorm.DB) {
	log.Info("DB migrations :: START")

	m := gormigrate.New(db, gormigrate.DefaultOptions, []*gormigrate.Migration{initial})

	if err := m.Migrate(); err != nil {
		log.Fatalf("Could not migrate: %v", err)
	}

	log.Info("DB migrations :: COMPLETE")
}
